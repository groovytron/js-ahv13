{"version":3,"sources":["../src/index.js"],"names":["ValidatorAHV13","ahv12","totalChecksum","i","length","number","nextTimesTen","Math","ceil","arr","split","join","reverse","map","parseInt","ahvnumber","_calculateCheckSum","_preProcessArray","ahv13","ahvArray","check","shift","checkSum","module","exports"],"mappings":";;;;;;IAAMA,c;AAEF,8BAAc;AAAA;AACb;;;;2CAGkBC,K,EAAO;AACtB,gBAAIC,gBAAgB,CAApB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,oBAAME,SAASJ,MAAME,CAAN,CAAf;AACA,oBAAIA,IAAI,CAAJ,KAAU,CAAd,EAAiB;AACbD,oCAAgBA,gBAAgB,KAAKG,MAArC;AACH,iBAFD,MAEO;AACHH,oCAAgBA,gBAAgBG,MAAhC;AACH;AACJ;AACD,gBAAMC,eAAeC,KAAKC,IAAL,CAAUN,gBAAgB,EAA1B,IAAgC,EAArD;AACA,mBAAOI,eAAeJ,aAAtB;AACH;;;yCAEgBO,G,EAAI;AAClB,mBAAOA,IAAIC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,EAApB,EAAwBD,KAAxB,CAA8B,EAA9B,EAAkCE,OAAlC,GAA4CC,GAA5C,CAAiD;AAAA,uBAAUC,SAAST,MAAT,CAAV;AAAA,aAAjD,CAAP;AACF;AACD;;;;;;;;;iCAMSU,S,EAAU;AAClB,mBAAO,KAAKC,kBAAL,CAAwB,KAAKC,gBAAL,CAAsBF,SAAtB,CAAxB,CAAP;AACA;;AAED;;;;;;;;gCAKQG,K,EAAO;AACX,gBAAMC,WAAW,KAAKF,gBAAL,CAAsBC,KAAtB,CAAjB;AACA,gBAAME,QAAQD,SAASE,KAAT,EAAd;AACA,gBAAMC,WAAW,KAAKN,kBAAL,CAAwBG,QAAxB,CAAjB;AACA,mBAAO,KAAKH,kBAAL,CAAwBG,QAAxB,MAAsCC,KAA7C;AACH;;;;;;AAELG,OAAOC,OAAP,GAAiBxB,cAAjB","file":"index.js","sourcesContent":["class ValidatorAHV13 {\n\n    constructor() {\n    }\n\n\n    _calculateCheckSum(ahv12) {\n        let totalChecksum = 0;\n        for (let i = 0; i < ahv12.length; i++) {\n            const number = ahv12[i];\n            if (i % 2 === 0) {\n                totalChecksum = totalChecksum + 13 * number;\n            } else {\n                totalChecksum = totalChecksum + number;\n            }\n        }\n        const nextTimesTen = Math.ceil(totalChecksum / 10) * 10;\n        return nextTimesTen - totalChecksum;\n    }\n\n    _preProcessArray(arr){\n       return arr.split('.').join('').split('').reverse().map( number => parseInt(number));\n    }\n    /**\n     * AHV Number without last number, like: ('756.9217.0769.8')\n     * @param ahv12\n     * @returns {number} for this case 5\n     * @private\n     */\n    checkSum(ahvnumber){\n     return this._calculateCheckSum(this._preProcessArray(ahvnumber));\n    }\n\n    /**\n     * validates a AHV13 Number with or without dots in the form of '756.9217.0769.85'\n     * @param ahv13\n     * @returns {boolean}\n     */\n    isValid(ahv13) {\n        const ahvArray = this._preProcessArray(ahv13);\n        const check = ahvArray.shift();\n        const checkSum = this._calculateCheckSum(ahvArray);\n        return this._calculateCheckSum(ahvArray) === check;\n    }\n}\nmodule.exports = ValidatorAHV13;"]}