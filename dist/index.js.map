{"version":3,"sources":["../src/index.js"],"names":["ValidatorAHV13","ahv12","Math","ceil","number","totalChecksum","i","length","nextTimesTen","arr","split","join","reverse","map","parseInt","ahvNumber12","parsedNumber","_preProcessArray","_calculateCheckSum","ahv13","reversedSSNArray","checkSumSSN","shift","checkSumCalculated","module","exports"],"mappings":"kZAAMA,CAAAA,c,YAEF,YAAc,wBACb,C,uDAGD,4BAAmBC,CAAnB,CAA0B,CAEtB,UAQqBC,IAAI,CAACC,IAR1B,CACUC,CADV,CADIC,CAAa,CAAG,CACpB,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,CAAK,CAACM,MAA1B,CAAkCD,CAAC,EAAnC,CACUF,CADV,CACmBH,CAAK,CAACK,CAAD,CADxB,CAGQD,CAHR,EAEkB,CAAV,EAAAC,CAAC,CAAG,CAFZ,CAGwC,GAAKF,CAH7C,CAKwCA,CALxC,CAQA,GAAMI,CAAAA,CAAY,CAAmC,EAAhC,GAAUH,CAAa,CAAG,EAA1B,CAArB,CACA,MAAOG,CAAAA,CAAY,CAAGH,CACzB,C,gCAQD,0BAAiBI,CAAjB,CAAsB,CAClB,MAAOA,CAAAA,CAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,EAApB,EAAwBD,KAAxB,CAA8B,EAA9B,EAAkCE,OAAlC,GAA4CC,GAA5C,CAAgD,SAAAT,CAAM,QAAIU,CAAAA,QAAQ,CAACV,CAAD,CAAZ,CAAtD,CACV,C,wBAQD,kBAASW,CAAT,CAAsB,CAClB,GAAMC,CAAAA,CAAY,CAAG,KAAKC,gBAAL,CAAsBF,CAAtB,CAArB,CACA,MAAO,MAAKG,kBAAL,CAAwBF,CAAxB,CACV,C,uBAOD,iBAAQG,CAAR,CAAe,IACLC,CAAAA,CAAgB,CAAG,KAAKH,gBAAL,CAAsBE,CAAtB,CADd,CAGLE,CAAW,CAAGD,CAAgB,CAACE,KAAjB,EAHT,CAILC,CAAkB,CAAG,KAAKL,kBAAL,CAAwBE,CAAxB,CAJhB,CAKX,MAAOG,CAAAA,CAAkB,GAAKF,CACjC,C,SAGLG,MAAM,CAACC,OAAP,CAAiBzB,c","sourcesContent":["class ValidatorAHV13 {\r\n\r\n    constructor() {\r\n    }\r\n\r\n\r\n    _calculateCheckSum(ahv12) {\r\n        let totalChecksum = 0;\r\n        for (let i = 0; i < ahv12.length; i++) {\r\n            const number = ahv12[i];\r\n            if (i % 2 === 0) {\r\n                totalChecksum = totalChecksum + 13 * number;\r\n            } else {\r\n                totalChecksum = totalChecksum + number;\r\n            }\r\n        }\r\n        const nextTimesTen = Math.ceil(totalChecksum / 10) * 10;\r\n        return nextTimesTen - totalChecksum;\r\n    }\r\n\r\n    /**\r\n     * this will remove '.' and reverse the number\r\n     * @param arr\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _preProcessArray(arr) {\r\n        return arr.split('.').join('').split('').reverse().map(number => parseInt(number));\r\n    }\r\n\r\n    /**\r\n     * AHV Number without last number, like: ('756.9217.0769.8')\r\n     * @param ahvNumber12\r\n     * @returns {checksum} for this case 5\r\n     * @private\r\n     */\r\n    checkSum(ahvNumber12) {\r\n        const parsedNumber = this._preProcessArray(ahvNumber12);\r\n        return this._calculateCheckSum(parsedNumber);\r\n    }\r\n\r\n    /**\r\n     * validates a AHV13 Number with or without dots in the form of '756.9217.0769.85'\r\n     * @param ahv13\r\n     * @returns {boolean}\r\n     */\r\n    isValid(ahv13) {\r\n        const reversedSSNArray = this._preProcessArray(ahv13);\r\n        // remove the first entry, as it is the checkusm\r\n        const checkSumSSN = reversedSSNArray.shift();\r\n        const checkSumCalculated = this._calculateCheckSum(reversedSSNArray);\r\n        return checkSumCalculated === checkSumSSN;\r\n    }\r\n}\r\n\r\nmodule.exports = ValidatorAHV13;"],"file":"index.js"}